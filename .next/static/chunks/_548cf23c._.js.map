{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/barondoss/Dev/dossx-latest/components/shared/SmoothScroll.tsx"],"sourcesContent":["'use client'\nimport { ReactLenis, useLenis } from 'lenis/react'\nimport { usePathname, useSearchParams } from 'next/navigation'\nimport { ReactNode, useEffect } from 'react'\n\ninterface SmoothScrollingProps {\n  children: ReactNode\n}\n\nconst SmoothScrollProvider = ({ children }: Readonly<SmoothScrollingProps>) => {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  const lenis = useLenis()\n\n  useEffect(() => {\n    lenis?.scrollTo(0, { immediate: true })\n  }, [pathname, searchParams, lenis])\n\n  useEffect(() => {\n    if (!lenis) return\n\n    const handleClick = (ele: Element) => {\n      lenis.scrollTo(ele.getAttribute('href') ?? '', {\n        offset: -100,\n      })\n    }\n\n    const elements = document.querySelectorAll('.lenis-scroll-to')\n    const clickHandler = (e: Event) => handleClick(e.target as Element)\n\n    elements.forEach((ele) => {\n      ele.addEventListener('click', clickHandler)\n    })\n\n    return () => {\n      elements.forEach((ele) => {\n        ele.removeEventListener('click', clickHandler)\n      })\n    }\n  }, [lenis, pathname])\n\n  return (\n    <ReactLenis root options={{ duration: 1.1 }}>\n      {children}\n    </ReactLenis>\n  )\n}\n\nexport default SmoothScrollProvider\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;AAHA;;;;AASA,MAAM,uBAAuB,CAAC,EAAE,QAAQ,EAAkC;;IACxE,MAAM,WAAW,CAAA,GAAA,yRAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,eAAe,CAAA,GAAA,yRAAA,CAAA,kBAAe,AAAD;IAEnC,MAAM,QAAQ,CAAA,GAAA,2NAAA,CAAA,WAAQ,AAAD;IAErB,CAAA,GAAA,iTAAA,CAAA,YAAS,AAAD;0CAAE;YACR,OAAO,SAAS,GAAG;gBAAE,WAAW;YAAK;QACvC;yCAAG;QAAC;QAAU;QAAc;KAAM;IAElC,CAAA,GAAA,iTAAA,CAAA,YAAS,AAAD;0CAAE;YACR,IAAI,CAAC,OAAO;YAEZ,MAAM;8DAAc,CAAC;oBACnB,MAAM,QAAQ,CAAC,IAAI,YAAY,CAAC,WAAW,IAAI;wBAC7C,QAAQ,CAAC;oBACX;gBACF;;YAEA,MAAM,WAAW,SAAS,gBAAgB,CAAC;YAC3C,MAAM;+DAAe,CAAC,IAAa,YAAY,EAAE,MAAM;;YAEvD,SAAS,OAAO;kDAAC,CAAC;oBAChB,IAAI,gBAAgB,CAAC,SAAS;gBAChC;;YAEA;kDAAO;oBACL,SAAS,OAAO;0DAAC,CAAC;4BAChB,IAAI,mBAAmB,CAAC,SAAS;wBACnC;;gBACF;;QACF;yCAAG;QAAC;QAAO;KAAS;IAEpB,qBACE,iVAAC,2NAAA,CAAA,aAAU;QAAC,IAAI;QAAC,SAAS;YAAE,UAAU;QAAI;kBACvC;;;;;;AAGP;GAtCM;;QACa,yRAAA,CAAA,cAAW;QACP,yRAAA,CAAA,kBAAe;QAEtB,2NAAA,CAAA,WAAQ;;;KAJlB;uCAwCS","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///Users/barondoss/Dev/dossx-latest/utils/Providers.tsx"],"sourcesContent":["'use client'\nimport { ThemeProvider as NextThemesProvider, ThemeProviderProps } from 'next-themes'\nimport { useEffect, useState } from 'react'\n\nexport function ThemeModeProvider({ children, ...props }: Readonly<ThemeProviderProps>) {\n  const [mount, setMount] = useState(false)\n\n  useEffect(() => {\n    setMount(true)\n\n    return () => {\n      setMount(false)\n    }\n  }, [])\n\n  if (!mount) return null\n\n  return (\n    <NextThemesProvider attribute=\"class\" defaultTheme=\"dark\" forcedTheme=\"dark\" {...props}>\n      {children}\n    </NextThemesProvider>\n  )\n}\n"],"names":[],"mappings":";;;;AACA;AACA;;;AAFA;;;AAIO,SAAS,kBAAkB,EAAE,QAAQ,EAAE,GAAG,OAAqC;;IACpF,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,iTAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,CAAA,GAAA,iTAAA,CAAA,YAAS,AAAD;uCAAE;YACR,SAAS;YAET;+CAAO;oBACL,SAAS;gBACX;;QACF;sCAAG,EAAE;IAEL,IAAI,CAAC,OAAO,OAAO;IAEnB,qBACE,iVAAC,2RAAA,CAAA,gBAAkB;QAAC,WAAU;QAAQ,cAAa;QAAO,aAAY;QAAQ,GAAG,KAAK;kBACnF;;;;;;AAGP;GAlBgB;KAAA","debugId":null}}]
}