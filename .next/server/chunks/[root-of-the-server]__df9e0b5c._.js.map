{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/barondoss/Dev/dossx-latest/app/api/contact/route.ts"],"sourcesContent":["import { NextResponse, NextRequest } from 'next/server';\nimport { Resend } from 'resend';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n\n    // only require the truly mandatory fields\n    const required = ['name','email','preferredContact','message'];\n    const missing = required.find((f) => !body[f]);\n    if (missing) {\n      return NextResponse.json(\n        { ok: false, error: `Missing required field: ${missing}` },\n        { status: 400 }\n      );\n    }\n\n    const resend = new Resend(process.env.RESEND_API_KEY!);\n    const { error } = await resend.emails.send({\n      from: 'DossX Contact <noreply@dossx.com>',\n      to:   'hello@dossx.com',\n      subject: `ðŸ”” New inquiry at DossX - ${body.name}`,\n      html: `\n        <h2>New inquiry from dossx.com</h2>\n        <p><strong>Name:</strong> ${body.name}</p>\n        <p><strong>Company:</strong> ${body.company || 'â€”'}</p>\n        <p><strong>Email:</strong> ${body.email}</p>\n        <p><strong>Role:</strong> ${body.role || 'â€”'}</p>\n        <p><strong>Preferred Contact:</strong> ${body.preferredContact}</p>\n        ${body.preferredContact === 'Phone' ? `<p><strong>Phone:</strong> ${body.phone}</p>` : ''}\n        <p><strong>Timeline:</strong> ${body.timeline || 'â€”'}</p>\n        <p><strong>Heard About:</strong> ${body.heardAbout || 'â€”'}</p>\n        <p><strong>Message:</strong><br/>${body.message.replace(/\\n/g, '<br/>')}</p>\n      `,\n    });\n\n    if (error) {\n      return NextResponse.json({ ok: false, error: error.message }, { status: 500 });\n    }\n\n    return NextResponse.json({ ok: true });\n  } catch (err: any) {\n    console.error('[CONTACT_API_ERROR]', err);\n    return NextResponse.json({ ok: false, error: err.message }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,0CAA0C;QAC1C,MAAM,WAAW;YAAC;YAAO;YAAQ;YAAmB;SAAU;QAC9D,MAAM,UAAU,SAAS,IAAI,CAAC,CAAC,IAAM,CAAC,IAAI,CAAC,EAAE;QAC7C,IAAI,SAAS;YACX,OAAO,oRAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,IAAI;gBAAO,OAAO,CAAC,wBAAwB,EAAE,SAAS;YAAC,GACzD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,IAAI,0QAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc;QACpD,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;YACzC,MAAM;YACN,IAAM;YACN,SAAS,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,CAAC;;kCAEqB,EAAE,KAAK,IAAI,CAAC;qCACT,EAAE,KAAK,OAAO,IAAI,IAAI;mCACxB,EAAE,KAAK,KAAK,CAAC;kCACd,EAAE,KAAK,IAAI,IAAI,IAAI;+CACN,EAAE,KAAK,gBAAgB,CAAC;QAC/D,EAAE,KAAK,gBAAgB,KAAK,UAAU,CAAC,2BAA2B,EAAE,KAAK,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG;sCAC5D,EAAE,KAAK,QAAQ,IAAI,IAAI;yCACpB,EAAE,KAAK,UAAU,IAAI,IAAI;yCACzB,EAAE,KAAK,OAAO,CAAC,OAAO,CAAC,OAAO,SAAS;MAC1E,CAAC;QACH;QAEA,IAAI,OAAO;YACT,OAAO,oRAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,IAAI;gBAAO,OAAO,MAAM,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,OAAO,oRAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;QAAK;IACtC,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,oRAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;YAAO,OAAO,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}}]
}