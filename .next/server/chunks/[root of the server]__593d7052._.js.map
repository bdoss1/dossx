{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/barondoss/Dev/dossx-latest/app/api/contact/route.ts"],"sourcesContent":["import { NextResponse, NextRequest } from 'next/server';\nimport { Resend } from 'resend';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n\n    // Basic validation\n    const required = ['name', 'email', 'service', 'budget', 'message'];\n    if (required.some((f) => !body[f])) {\n      return NextResponse.json({ ok: false, error: 'Missing required fields' }, { status: 400 });\n    }\n\n    const resend = new Resend(process.env.RESEND_API_KEY);\n    const { error } = await resend.emails.send({\n      from: 'DossX Contact <noreply@dossx.com>',\n      to: 'hello@dossx.com',\n      subject: `ðŸ”” New inquiry from ${body.name}`,\n      html: `\n        <h2>New inquiry from dossx.com</h2>\n        <p><strong>Name:</strong> ${body.name}</p>\n        <p><strong>Company:</strong> ${body.company || 'â€”'}</p>\n        <p><strong>Email:</strong> ${body.email}</p>\n        <p><strong>Service:</strong> ${body.service}</p>\n        <p><strong>Budget:</strong> ${body.budget}</p>\n        <p><strong>Message:</strong><br/>${body.message.replace(/\\n/g, '<br/>')}</p>\n      `,\n    });\n\n    if (error) {\n      // Pass Resendâ€™s error back to the client for easier debugging\n      return NextResponse.json({ ok: false, error: error.message }, { status: 500 });\n    }\n\n    return NextResponse.json({ ok: true });\n  } catch (err: any) {\n    console.error('[CONTACT_API_ERROR]', err);\n    return NextResponse.json({ ok: false, error: err.message }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,mBAAmB;QACnB,MAAM,WAAW;YAAC;YAAQ;YAAS;YAAW;YAAU;SAAU;QAClE,IAAI,SAAS,IAAI,CAAC,CAAC,IAAM,CAAC,IAAI,CAAC,EAAE,GAAG;YAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,IAAI;gBAAO,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC1F;QAEA,MAAM,SAAS,IAAI,0IAAA,CAAA,SAAM,CAAC,QAAQ,GAAG,CAAC,cAAc;QACpD,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;YACzC,MAAM;YACN,IAAI;YACJ,SAAS,CAAC,oBAAoB,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,CAAC;;kCAEqB,EAAE,KAAK,IAAI,CAAC;qCACT,EAAE,KAAK,OAAO,IAAI,IAAI;mCACxB,EAAE,KAAK,KAAK,CAAC;qCACX,EAAE,KAAK,OAAO,CAAC;oCAChB,EAAE,KAAK,MAAM,CAAC;yCACT,EAAE,KAAK,OAAO,CAAC,OAAO,CAAC,OAAO,SAAS;MAC1E,CAAC;QACH;QAEA,IAAI,OAAO;YACT,8DAA8D;YAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,IAAI;gBAAO,OAAO,MAAM,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;QAAK;IACtC,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;YAAO,OAAO,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}