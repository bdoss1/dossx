{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/barondoss/Dev/dossx-latest/app/api/newsletter/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\n\n// Optional: Resend email notification\nlet Resend: any = null;\ntry {\n  // Lazy import so the route works even if 'resend' isn't installed\n  // npm i resend  (if you want email notifications)\n  // @ts-ignore\n  Resend = (await import(\"resend\")).Resend;\n} catch { /* noop */ }\n\nfunction sanitize(s?: string) {\n  return (s || \"\").trim().slice(0, 500);\n}\nfunction validEmail(e?: string) {\n  return !!e && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(e);\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { email, name, source } = await req.json();\n    const cleanEmail = sanitize(email);\n    const cleanName = sanitize(name);\n    const cleanSource = sanitize(source || \"footer-newsletter\");\n\n    if (!validEmail(cleanEmail)) {\n      return NextResponse.json({ error: \"Please provide a valid email.\" }, { status: 400 });\n    }\n\n    // 1) Try Supabase insert if env is present\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n    let savedToSupabase = false;\n    if (supabaseUrl && supabaseKey) {\n      // Assumes you have a public table 'newsletter_subscribers' with RLS disabled or a policy for service role\n      const res = await fetch(`${supabaseUrl}/rest/v1/newsletter_subscribers`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"apikey\": supabaseKey,\n          \"Authorization\": `Bearer ${supabaseKey}`,\n          \"Prefer\": \"return=representation\"\n        },\n        body: JSON.stringify({\n          email: cleanEmail,\n          name: cleanName || null,\n          source: cleanSource,\n          created_at: new Date().toISOString()\n        })\n      });\n\n      // 201/200 expected for insert\n      if (res.ok) savedToSupabase = true;\n      else {\n        const txt = await res.text().catch(() => \"\");\n        console.warn(\"Supabase insert failed:\", res.status, txt);\n      }\n    }\n\n    // 2) If not saved to Supabase, try sending a Resend notification\n    let emailed = false;\n    if (!savedToSupabase && process.env.RESEND_API_KEY && Resend) {\n      const resend = new Resend(process.env.RESEND_API_KEY);\n      const to = process.env.SALES_EMAIL || process.env.FROM_EMAIL || \"hello@dossx.com\";\n      try {\n        await resend.emails.send({\n          from: process.env.FROM_EMAIL || \"no-reply@dossx.com\",\n          to,\n          subject: \"New Newsletter Subscriber\",\n          html: `\n            <p><b>Email:</b> ${cleanEmail}</p>\n            <p><b>Name:</b> ${cleanName || \"-\"}</p>\n            <p><b>Source:</b> ${cleanSource}</p>\n            <p><i>Stored via email fallback (Resend)</i></p>\n          `\n        });\n        emailed = true;\n      } catch (e: any) {\n        console.warn(\"Resend email failed:\", e?.message || e);\n      }\n    }\n\n    // 3) Final response\n    return NextResponse.json({\n      ok: true,\n      message: \"You're subscribed! Thanks for joining DossX Insights.\",\n      stored: savedToSupabase ? \"supabase\" : (emailed ? \"email-fallback\" : \"none\"),\n    });\n  } catch (e: any) {\n    console.error(\"Newsletter route error:\", e?.message || e);\n    return NextResponse.json({ error: \"Unable to process your subscription right now.\" }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;;AAEA,sCAAsC;AACtC,IAAI,SAAc;AAClB,IAAI;IACF,kEAAkE;IAClE,kDAAkD;IAClD,aAAa;IACb,SAAS,CAAC,yNAAsB,EAAE,MAAM;AAC1C,EAAE,OAAM,CAAa;AAErB,SAAS,SAAS,CAAU;IAC1B,OAAO,CAAC,KAAK,EAAE,EAAE,IAAI,GAAG,KAAK,CAAC,GAAG;AACnC;AACA,SAAS,WAAW,CAAU;IAC5B,OAAO,CAAC,CAAC,KAAK,6BAA6B,IAAI,CAAC;AAClD;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;QAC9C,MAAM,aAAa,SAAS;QAC5B,MAAM,YAAY,SAAS;QAC3B,MAAM,cAAc,SAAS,UAAU;QAEvC,IAAI,CAAC,WAAW,aAAa;YAC3B,OAAO,oRAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QACrF;QAEA,2CAA2C;QAC3C,MAAM;QACN,MAAM,cAAc,QAAQ,GAAG,CAAC,yBAAyB;QAEzD,IAAI,kBAAkB;QACtB,IAAI,eAAe,aAAa;YAC9B,0GAA0G;YAC1G,MAAM,MAAM,MAAM,MAAM,GAAG,YAAY,+BAA+B,CAAC,EAAE;gBACvE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;oBAChB,UAAU;oBACV,iBAAiB,CAAC,OAAO,EAAE,aAAa;oBACxC,UAAU;gBACZ;gBACA,MAAM,KAAK,SAAS,CAAC;oBACnB,OAAO;oBACP,MAAM,aAAa;oBACnB,QAAQ;oBACR,YAAY,IAAI,OAAO,WAAW;gBACpC;YACF;YAEA,8BAA8B;YAC9B,IAAI,IAAI,EAAE,EAAE,kBAAkB;iBACzB;gBACH,MAAM,MAAM,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,IAAM;gBACzC,QAAQ,IAAI,CAAC,2BAA2B,IAAI,MAAM,EAAE;YACtD;QACF;QAEA,iEAAiE;QACjE,IAAI,UAAU;QACd,IAAI,CAAC,mBAAmB,QAAQ,GAAG,CAAC,cAAc,IAAI,QAAQ;YAC5D,MAAM,SAAS,IAAI,OAAO,QAAQ,GAAG,CAAC,cAAc;YACpD,MAAM,KAAK,QAAQ,GAAG,CAAC,WAAW,IAAI,QAAQ,GAAG,CAAC,UAAU,IAAI;YAChE,IAAI;gBACF,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;oBACvB,MAAM,QAAQ,GAAG,CAAC,UAAU,IAAI;oBAChC;oBACA,SAAS;oBACT,MAAM,CAAC;6BACY,EAAE,WAAW;4BACd,EAAE,aAAa,IAAI;8BACjB,EAAE,YAAY;;UAElC,CAAC;gBACH;gBACA,UAAU;YACZ,EAAE,OAAO,GAAQ;gBACf,QAAQ,IAAI,CAAC,wBAAwB,GAAG,WAAW;YACrD;QACF;QAEA,oBAAoB;QACpB,OAAO,oRAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,IAAI;YACJ,SAAS;YACT,QAAQ,kBAAkB,aAAc,UAAU,mBAAmB;QACvE;IACF,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,2BAA2B,GAAG,WAAW;QACvD,OAAO,oRAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiD,GAAG;YAAE,QAAQ;QAAI;IACtG;AACF","debugId":null}}]
}